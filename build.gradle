/**
 * Top-level build file for ftc_app project.
 *
 * It is extraordinarily rare that you will ever need to edit this file.
 */
buildscript {
    repositories {
        google()
        jcenter()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:3.5.0'
        classpath 'de.undercouch:gradle-download-task:3.4.3'
        classpath "gradle.plugin.io.github.http-builder-ng:http-plugin:0.1.1"
    }
}

// This is now required because aapt2 has to be downloaded from the
// google() repository beginning with version 3.2 of the Android Gradle Plugin
allprojects {
    repositories {
        google()
        jcenter()
    }
}

apply plugin: 'de.undercouch.download'
apply plugin: "io.github.http-builder-ng.http-plugin"
import io.github.httpbuilderng.http.HttpTask
import javax.swing.JFileChooser
import javax.swing.filechooser.FileFilter

import static groovyx.net.http.MultipartContent.multipart
//import groovyx.net.http.OkHttpBuilder
//import groovyx.net.http.*
import groovyx.net.http.ApacheEncoders
import groovy.swing.SwingBuilder
System.setProperty('java.awt.headless', 'false')
def APP_URI = 'http://192.168.49.1:8080' //TODO: Change this URL to match the address specified in the Robot Controller or Driverstation App

http {
    config {
        request.uri = APP_URI
    }
}

task downloadZipFile(type: Download) {
    src APP_URI+"/java/file/download?f=/src/org/"
    dest new File(buildDir, 'code.zip')
}

task pull(dependsOn: downloadZipFile, type: Copy) {
    from zipTree(downloadZipFile.dest)
    into 'TeamCode/src/main/java/org'
}

task compress(type: Zip) {
    from new File('TeamCode/src/main/java/')
//    include '*'
//    include '*/*' //to include contents of a folder present inside Reports directory
    archiveName 'out.zip'
    destinationDir buildDir
    println archivePath
}

task wipe(type: HttpTask) {
    def files = ['/src/org']
//    config {
//        request.uri = 'http://192.168.1.8:8080'
//    }
    post {
        request.uri.path = '/java/file/delete'
        request.contentType = 'application/x-www-form-urlencoded'
        request.body = [delete: '["/src/"]']
        response.success { data, body ->
            println(body)
        }
    }
}

task factory_reset(type: HttpTask) {
    def newPath = '';
    def id;
//    config {
//        request.uri = 'http://192.168.1.8:8080'
//    }
    get {
        request.uri.path = '/java/admin/factory_reset'
        request.contentType = 'text/plain'
        response.success { req, body ->
            println(body)
            id = body
//            newPath = '/java/admin/factory_reset?id='

        }
    }
    get {
        println('new path: ' + newPath);
        request.uri.path = '/java/admin/factory_reset'
        request.uri.query = [id: id]
        response.success { req, body ->
            println('Success')
        }

    }
}

task remoteBuild(type: HttpTask) {
//    config {
//        request.uri = 'http://192.168.1.8:8080'
//    }
    get {
        request.uri.path = '/java/build/start'
    }
    get {
        request.uri.path = '/java/build/wait'
        response.success { arg, body ->
            logger.error(body)
        }
    }
    get {
        request.uri.path = '/java/build/status'
        response.success { data, body ->
            println(body)
        }
    }
}
task push(type: HttpTask) {
    def paths;
    get {
        request.uri.path = '/java/file/tree'
        response.success { res, body ->
            paths = body.src
        }
    }
    println(paths)
    fileTree('TeamCode/src/main/java/').matching { include "**/*.java" }.each { file ->
//        println('Root:'+ rootDir+'/TeamCode/src/main/java/')
//        rootProject.getRootProject().rootDir
//        println(file-(rootDir+'/TeamCode/src/main/java/'))
        post {
            request.uri.path = '/java/file/upload'
            request.contentType = 'multipart/form-data'
//            request.body =[data: file.text]
            request.body = multipart {
                part 'file', file.name, 'application/octet-stream', file
            }
            request.encoder 'multipart/form-data', ApacheEncoders.&multipart
            response.success { res, body ->
                println('success')
                println body
            }
            response.failure { err, body ->
                println(body)
            }
            response.exception { e ->
                println(e)
            }
        }
    }

}

task newFile(type: HttpTask) {
    def filePath = null
    def file = null
    def setupHardware = false
    def template;
    def dlg
    get {
        request.uri.path = '/java/file/templates'
        if (System.console() == null)
            System.setProperty('java.awt.headless', 'false')
        response.success { arg1, body ->
            println(body)

            new SwingBuilder().edt {
                dialog(modal: true, // Otherwise the build will continue running before you closed the dialog
                        title: 'Options', // Dialog title
                        alwaysOnTop: true, // pretty much what the name says
                        resizable: false, // Don't allow the user to resize the dialog
                        locationRelativeTo: null, // Place dialog in center of the screen
                        pack: true, // We need to pack the dialog (so it will take the size of it's children
                        show: true // Let's show it
                ) {
                    vbox { // Put everything below each other
                        templateLabel = label('Choose a template: ')
                        templateList = comboBox(items: body)
                        hardwareChk = checkBox('Setup Code for Configured Hardware')
                        fileHandler = fileChooser(
                                dialogTitle: 'Choose file',
                                currentDirectory: new File(rootDir, '/TeamCode/src/main/java/org/firstinspires/ftc/teamcode'),
                                dialogType: JFileChooser.SAVE_DIALOG,
                                fileFilter: [getDescription: {-> "*.java"}, accept:{f -> f.toString() ==~ /.*?\.java/  || f.isDirectory() }] as FileFilter,
                                actionPerformed: { action ->
                                    println(action.actionCommand)
                                    if (action.actionCommand == 'ApproveSelection') {
                                        println('FilePath: ' + fileHandler.selectedFile)
                                        file = fileHandler.selectedFile
                                        println(file.name.endsWith('.java'))
                                        if(!file.name.endsWith('.java')){
                                            file = new File(file.path+'.java');
                                            println('New Name: ' + file)
                                        }
                                        filePath = '/src/' + file.path.minus(rootDir.path + '/TeamCode/src/main/java/')
                                        setupHardware = hardwareChk.selected
                                        template = 'templates/'+templateList.selectedItem
                                    }
                                    dispose()
                                }
                        )
                    }
                }

            }
        }
    }

    post {
        assert filePath != null // Crash the task if the filePath is null, meaning the user didn't select anything, or canceled the dialog
        println('FINISHED: ' + filePath)
        println(setupHardware)
        request.uri.path = '/java/file/new'
        request.uri.query = [
                f: filePath
        ]
        request.contentType = 'application/x-www-form-urlencoded'
        request.body = [
                new              : '1',
                opModeAnnotations: '@TeleOp',
                template         : template,
                rcSetupHardware  : setupHardware ? 1 : 0,
                teamName         : ''
        ]
        response.success { arg1, body ->
            println('Success: ' + body)
        }
    }
    get {
        request.uri.path = '/java/file/get'
        request.uri.query = [f: filePath]
        response.success { arg1, body ->
            println(body)
            file.text = body
        }
    }
}

task wipeAndPush(type: GradleBuild) {
    tasks = ['wipe', 'push']
}

task everything(type: GradleBuild) {
    tasks = ['wipe', 'push', 'remoteBuild']
}
